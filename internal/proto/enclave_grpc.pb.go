// SPDX-FileCopyrightText: Â© 2024 Nadim Kobeissi <nadim@symbolic.software>
// SPDX-License-Identifier: GPL-2.0-only

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: enclave.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EnclaveService_PingPong_FullMethodName    = "/proto.EnclaveService/PingPong"
	EnclaveService_PutNotebook_FullMethodName = "/proto.EnclaveService/PutNotebook"
	EnclaveService_GetNotebook_FullMethodName = "/proto.EnclaveService/GetNotebook"
)

// EnclaveServiceClient is the client API for EnclaveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnclaveServiceClient interface {
	PingPong(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error)
	PutNotebook(ctx context.Context, in *EncryptedNotebook, opts ...grpc.CallOption) (*PutNotebookResponse, error)
	GetNotebook(ctx context.Context, in *NotebookId, opts ...grpc.CallOption) (*GetNotebookResponse, error)
}

type enclaveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnclaveServiceClient(cc grpc.ClientConnInterface) EnclaveServiceClient {
	return &enclaveServiceClient{cc}
}

func (c *enclaveServiceClient) PingPong(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error) {
	out := new(Ping)
	err := c.cc.Invoke(ctx, EnclaveService_PingPong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclaveServiceClient) PutNotebook(ctx context.Context, in *EncryptedNotebook, opts ...grpc.CallOption) (*PutNotebookResponse, error) {
	out := new(PutNotebookResponse)
	err := c.cc.Invoke(ctx, EnclaveService_PutNotebook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclaveServiceClient) GetNotebook(ctx context.Context, in *NotebookId, opts ...grpc.CallOption) (*GetNotebookResponse, error) {
	out := new(GetNotebookResponse)
	err := c.cc.Invoke(ctx, EnclaveService_GetNotebook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnclaveServiceServer is the server API for EnclaveService service.
// All implementations must embed UnimplementedEnclaveServiceServer
// for forward compatibility
type EnclaveServiceServer interface {
	PingPong(context.Context, *Ping) (*Ping, error)
	PutNotebook(context.Context, *EncryptedNotebook) (*PutNotebookResponse, error)
	GetNotebook(context.Context, *NotebookId) (*GetNotebookResponse, error)
	mustEmbedUnimplementedEnclaveServiceServer()
}

// UnimplementedEnclaveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnclaveServiceServer struct {
}

func (UnimplementedEnclaveServiceServer) PingPong(context.Context, *Ping) (*Ping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPong not implemented")
}
func (UnimplementedEnclaveServiceServer) PutNotebook(context.Context, *EncryptedNotebook) (*PutNotebookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutNotebook not implemented")
}
func (UnimplementedEnclaveServiceServer) GetNotebook(context.Context, *NotebookId) (*GetNotebookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotebook not implemented")
}
func (UnimplementedEnclaveServiceServer) mustEmbedUnimplementedEnclaveServiceServer() {}

// UnsafeEnclaveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnclaveServiceServer will
// result in compilation errors.
type UnsafeEnclaveServiceServer interface {
	mustEmbedUnimplementedEnclaveServiceServer()
}

func RegisterEnclaveServiceServer(s grpc.ServiceRegistrar, srv EnclaveServiceServer) {
	s.RegisterService(&EnclaveService_ServiceDesc, srv)
}

func _EnclaveService_PingPong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclaveServiceServer).PingPong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnclaveService_PingPong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclaveServiceServer).PingPong(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclaveService_PutNotebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptedNotebook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclaveServiceServer).PutNotebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnclaveService_PutNotebook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclaveServiceServer).PutNotebook(ctx, req.(*EncryptedNotebook))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclaveService_GetNotebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclaveServiceServer).GetNotebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnclaveService_GetNotebook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclaveServiceServer).GetNotebook(ctx, req.(*NotebookId))
	}
	return interceptor(ctx, in, info, handler)
}

// EnclaveService_ServiceDesc is the grpc.ServiceDesc for EnclaveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnclaveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EnclaveService",
	HandlerType: (*EnclaveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingPong",
			Handler:    _EnclaveService_PingPong_Handler,
		},
		{
			MethodName: "PutNotebook",
			Handler:    _EnclaveService_PutNotebook_Handler,
		},
		{
			MethodName: "GetNotebook",
			Handler:    _EnclaveService_GetNotebook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enclave.proto",
}
